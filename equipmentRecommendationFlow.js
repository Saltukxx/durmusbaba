const woocommerceService = require('./woocommerceService');
const logger = require('./logger');

/**
 * Equipment Recommendation Conversation Flow
 * Guides users through requirement gathering to provide specific product recommendations
 */

class EquipmentRecommendationFlow {
  constructor() {
    this.activeSessions = new Map();
  }

  /**
   * Initialize equipment recommendation flow
   * @param {string} userId - User ID
   * @param {string} language - Language code
   * @param {Object} initialData - Any initial data from cold storage calculation
   * @returns {string} - Initial question
   */
  initializeFlow(userId, language = 'en', initialData = null) {
    const session = {
      userId,
      language,
      step: 1,
      maxSteps: 5,
      requirements: {
        equipmentType: null,
        capacity: initialData?.finalCapacity || null,
        temperature: initialData?.parameters?.temperature || null,
        roomSize: initialData?.parameters?.volume || null,
        budget: null,
        urgency: 'normal',
        application: null // meat, dairy, vegetables, etc.
      },
      startTime: new Date()
    };

    this.activeSessions.set(userId, session);
    logger.info(`Started equipment recommendation flow for user ${userId} in ${language}`);

    return this.getQuestion(session);
  }

  /**
   * Process user answer and move to next step
   * @param {Object} userSession - User session from session manager
   * @param {string} answer - User's answer
   * @returns {string} - Next question or final recommendations
   */
  async processAnswer(userSession, answer) {
    const session = this.activeSessions.get(userSession.userId);
    if (!session) {
      return this.initializeFlow(userSession.userId);
    }

    // Process the answer based on current step
    const processed = this.processCurrentStep(session, answer);
    
    if (!processed) {
      return this.askForClarification(session);
    }

    // Move to next step or provide recommendations
    session.step++;
    
    if (session.step > session.maxSteps || this.hasEnoughInfo(session)) {
      return await this.generateRecommendations(session);
    }

    return this.getQuestion(session);
  }

  /**
   * Process answer for current step
   * @param {Object} session - Flow session
   * @param {string} answer - User's answer
   * @returns {boolean} - Whether answer was processed successfully
   */
  processCurrentStep(session, answer) {
    const lowerAnswer = answer.toLowerCase();

    switch (session.step) {
      case 1: // Equipment type
        return this.processEquipmentType(session, lowerAnswer);
      
      case 2: // Application/Temperature
        return this.processApplication(session, lowerAnswer);
      
      case 3: // Capacity/Room size
        return this.processCapacity(session, lowerAnswer);
      
      case 4: // Budget
        return this.processBudget(session, lowerAnswer);
      
      case 5: // Urgency
        return this.processUrgency(session, lowerAnswer);
      
      default:
        return false;
    }
  }

  /**
   * Process equipment type selection
   */
  processEquipmentType(session, answer) {
    const equipmentMap = {
      en: {
        'cooling': 'cooling_units',
        'compressor': 'cooling_units', 
        'condensing': 'cooling_units',
        'evaporator': 'evaporators',
        'air cooler': 'evaporators',
        'condenser': 'condensers',
        'insulation': 'insulation',
        'panel': 'insulation',
        'door': 'doors',
        'complete': 'complete_system',
        'full': 'complete_system',
        'everything': 'complete_system'
      },
      tr: {
        'soƒüutma': 'cooling_units',
        'kompres√∂r': 'cooling_units',
        'evaporat√∂r': 'evaporators',
        'hava soƒüutucu': 'evaporators',
        'kondens√∂r': 'condensers',
        'yalƒ±tƒ±m': 'insulation',
        'panel': 'insulation',
        'kapƒ±': 'doors',
        'komple': 'complete_system',
        'tam': 'complete_system'
      },
      de: {
        'k√ºhlung': 'cooling_units',
        'kompressor': 'cooling_units',
        'verdampfer': 'evaporators',
        'luftk√ºhler': 'evaporators',
        'kondensator': 'condensers',
        'isolierung': 'insulation',
        'panel': 'insulation',
        't√ºr': 'doors',
        'komplett': 'complete_system',
        'vollst√§ndig': 'complete_system'
      }
    };

    const langMap = equipmentMap[session.language] || equipmentMap.en;
    
    for (const [keyword, type] of Object.entries(langMap)) {
      if (answer.includes(keyword)) {
        session.requirements.equipmentType = type;
        return true;
      }
    }

    // Check for numbers (option selection)
    if (answer.match(/[1-6]/)) {
      const optionMap = {
        '1': 'cooling_units',
        '2': 'evaporators', 
        '3': 'condensers',
        '4': 'insulation',
        '5': 'doors',
        '6': 'complete_system'
      };
      const option = answer.match(/[1-6]/)[0];
      session.requirements.equipmentType = optionMap[option];
      return true;
    }

    return false;
  }

  /**
   * Process application/temperature
   */
  processApplication(session, answer) {
    const applicationMap = {
      'meat': { temp: -18, app: 'meat' },
      'fish': { temp: -18, app: 'fish' },
      'dairy': { temp: 5, app: 'dairy' },
      'vegetable': { temp: 0, app: 'vegetables' },
      'fruit': { temp: 0, app: 'fruits' },
      'flower': { temp: 5, app: 'flowers' },
      'pharmacy': { temp: 5, app: 'pharmaceutical' },
      'et': { temp: -18, app: 'meat' },
      'balƒ±k': { temp: -18, app: 'fish' },
      's√ºt': { temp: 5, app: 'dairy' },
      'sebze': { temp: 0, app: 'vegetables' },
      'meyve': { temp: 0, app: 'fruits' },
      'fleisch': { temp: -18, app: 'meat' },
      'fisch': { temp: -18, app: 'fish' },
      'milch': { temp: 5, app: 'dairy' },
      'gem√ºse': { temp: 0, app: 'vegetables' },
      'obst': { temp: 0, app: 'fruits' }
    };

    // Check for application keywords
    for (const [keyword, data] of Object.entries(applicationMap)) {
      if (answer.includes(keyword)) {
        session.requirements.application = data.app;
        if (!session.requirements.temperature) {
          session.requirements.temperature = data.temp;
        }
        return true;
      }
    }

    // Check for temperature
    const tempMatch = answer.match(/(-?\d+)\s*¬∞?c/i);
    if (tempMatch) {
      session.requirements.temperature = parseInt(tempMatch[1]);
      return true;
    }

    return false;
  }

  /**
   * Process capacity/room size
   */
  processCapacity(session, answer) {
    // Extract capacity in kW or W
    const capacityMatch = answer.match(/(\d+(?:\.\d+)?)\s*(kw|kilowatt|w|watt)/i);
    if (capacityMatch) {
      let capacity = parseFloat(capacityMatch[1]);
      if (capacityMatch[2].toLowerCase().includes('kw')) {
        capacity *= 1000;
      }
      session.requirements.capacity = capacity;
      return true;
    }

    // Extract room size
    const sizeMatch = answer.match(/(\d+)\s*(?:m3|m¬≥|cubic|meter)/i);
    if (sizeMatch) {
      session.requirements.roomSize = parseInt(sizeMatch[1]);
      // Estimate capacity if not provided
      if (!session.requirements.capacity && session.requirements.temperature) {
        session.requirements.capacity = this.estimateCapacity(
          session.requirements.roomSize, 
          session.requirements.temperature
        );
      }
      return true;
    }

    return false;
  }

  /**
   * Process budget
   */
  processBudget(session, answer) {
    const budgetMatch = answer.match(/(\d+)\s*(?:euro|‚Ç¨|eur)/i);
    if (budgetMatch) {
      session.requirements.budget = parseInt(budgetMatch[1]);
      return true;
    }

    // Handle "no budget" responses
    if (answer.includes('no') || answer.includes('yok') || answer.includes('kein') ||
        answer.includes('skip') || answer.includes('ge√ß')) {
      session.requirements.budget = null;
      return true;
    }

    return false;
  }

  /**
   * Process urgency
   */
  processUrgency(session, answer) {
    if (answer.includes('urgent') || answer.includes('acil') || answer.includes('dringend')) {
      session.requirements.urgency = 'urgent';
    } else if (answer.includes('soon') || answer.includes('yakƒ±nda') || answer.includes('bald')) {
      session.requirements.urgency = 'soon';
    } else {
      session.requirements.urgency = 'normal';
    }
    return true;
  }

  /**
   * Get question for current step
   */
  getQuestion(session) {
    const questions = {
      en: {
        1: `üîß **Equipment Recommendation** (Step ${session.step}/${session.maxSteps})

What type of equipment do you need?

1Ô∏è‚É£ **Cooling Units** - Main refrigeration systems
2Ô∏è‚É£ **Evaporators** - Air coolers for inside cold rooms
3Ô∏è‚É£ **Condensers** - Heat rejection units
4Ô∏è‚É£ **Insulation Panels** - Wall and ceiling panels
5Ô∏è‚É£ **Cold Room Doors** - Entry doors
6Ô∏è‚É£ **Complete System** - Everything needed

Please select a number or describe what you need.`,

        2: `üå°Ô∏è **Application & Temperature** (Step ${session.step}/${session.maxSteps})

What will you store in the cold room?

‚Ä¢ **Meat/Fish** (-18¬∞C freezing)
‚Ä¢ **Dairy products** (+5¬∞C chilling) 
‚Ä¢ **Vegetables/Fruits** (0¬∞C fresh)
‚Ä¢ **Flowers** (+5¬∞C fresh)
‚Ä¢ **Other** - specify temperature

Example: "Meat storage" or "-20¬∞C"`,

        3: `üìè **Capacity & Size** (Step ${session.step}/${session.maxSteps})

${session.requirements.capacity ? 
  `Great! I see you need ${(session.requirements.capacity/1000).toFixed(1)}kW capacity.` : 
  'What is your cooling requirement?'}

Please provide:
‚Ä¢ **Room size**: "300m¬≥" or "10x8x3 meters"
‚Ä¢ **Cooling capacity**: "15kW" or "15000W"

Example: "200 cubic meters" or "12kW cooling"`,

        4: `üí∞ **Budget** (Step ${session.step}/${session.maxSteps})

What is your budget range?

‚Ä¢ **Under ‚Ç¨2,000** - Basic solutions
‚Ä¢ **‚Ç¨2,000 - ‚Ç¨5,000** - Professional grade
‚Ä¢ **‚Ç¨5,000 - ‚Ç¨10,000** - Premium systems
‚Ä¢ **Above ‚Ç¨10,000** - Industrial solutions
‚Ä¢ **No specific budget** - Show all options

Example: "5000 euro budget" or "no budget limit"`,

        5: `‚è∞ **Timeline** (Step ${session.step}/${session.maxSteps})

When do you need the equipment?

‚Ä¢ **Urgent** - Within 1 week
‚Ä¢ **Soon** - Within 1 month  
‚Ä¢ **Normal** - Standard delivery

This helps me prioritize in-stock items.`
      },
      
      tr: {
        1: `üîß **Ekipman √ñnerisi** (Adƒ±m ${session.step}/${session.maxSteps})

Hangi t√ºr ekipmana ihtiyacƒ±nƒ±z var?

1Ô∏è‚É£ **Soƒüutma √úniteleri** - Ana soƒüutma sistemleri
2Ô∏è‚É£ **Evaporat√∂rler** - Soƒüuk oda i√ßi hava soƒüutucularƒ±
3Ô∏è‚É£ **Kondens√∂rler** - Isƒ± atƒ±m √ºniteleri
4Ô∏è‚É£ **Yalƒ±tƒ±m Panelleri** - Duvar ve tavan panelleri
5Ô∏è‚É£ **Soƒüuk Oda Kapƒ±larƒ±** - Giri≈ü kapƒ±larƒ±
6Ô∏è‚É£ **Komple Sistem** - Gereken her ≈üey

L√ºtfen bir numara se√ßin veya neye ihtiyacƒ±nƒ±z olduƒüunu a√ßƒ±klayƒ±n.`,

        2: `üå°Ô∏è **Uygulama & Sƒ±caklƒ±k** (Adƒ±m ${session.step}/${session.maxSteps})

Soƒüuk odada ne depolayacaksƒ±nƒ±z?

‚Ä¢ **Et/Balƒ±k** (-18¬∞C dondurucu)
‚Ä¢ **S√ºt √ºr√ºnleri** (+5¬∞C soƒüutucu)
‚Ä¢ **Sebze/Meyve** (0¬∞C taze)
‚Ä¢ **√ái√ßek** (+5¬∞C taze)
‚Ä¢ **Diƒüer** - sƒ±caklƒ±k belirtin

√ñrnek: "Et depolama" veya "-20¬∞C"`,

        3: `üìè **Kapasite & Boyut** (Adƒ±m ${session.step}/${session.maxSteps})

${session.requirements.capacity ? 
  `Harika! ${(session.requirements.capacity/1000).toFixed(1)}kW kapasiteye ihtiyacƒ±nƒ±z olduƒüunu g√∂r√ºyorum.` : 
  'Soƒüutma gereksiniminiz nedir?'}

L√ºtfen ≈üunlarƒ± belirtin:
‚Ä¢ **Oda boyutu**: "300m¬≥" veya "10x8x3 metre"
‚Ä¢ **Soƒüutma kapasitesi**: "15kW" veya "15000W"

√ñrnek: "200 metrek√ºp" veya "12kW soƒüutma"`,

        4: `üí∞ **B√ºt√ße** (Adƒ±m ${session.step}/${session.maxSteps})

B√ºt√ße aralƒ±ƒüƒ±nƒ±z nedir?

‚Ä¢ **2.000‚Ç¨ altƒ±** - Temel √ß√∂z√ºmler
‚Ä¢ **2.000‚Ç¨ - 5.000‚Ç¨** - Profesyonel kalite
‚Ä¢ **5.000‚Ç¨ - 10.000‚Ç¨** - Premium sistemler
‚Ä¢ **10.000‚Ç¨ √ºzeri** - End√ºstriyel √ß√∂z√ºmler
‚Ä¢ **Belirli b√ºt√ße yok** - T√ºm se√ßenekleri g√∂ster

√ñrnek: "5000 euro b√ºt√ße" veya "b√ºt√ße sƒ±nƒ±rƒ± yok"`,

        5: `‚è∞ **Zaman √áizelgesi** (Adƒ±m ${session.step}/${session.maxSteps})

Ekipmana ne zaman ihtiyacƒ±nƒ±z var?

‚Ä¢ **Acil** - 1 hafta i√ßinde
‚Ä¢ **Yakƒ±nda** - 1 ay i√ßinde
‚Ä¢ **Normal** - Standart teslimat

Bu, stokta bulunan √ºr√ºnleri √∂nceliklendirmeme yardƒ±mcƒ± olur.`
      },

      de: {
        1: `üîß **Ger√§te-Empfehlung** (Schritt ${session.step}/${session.maxSteps})

Welche Art von Ausr√ºstung ben√∂tigen Sie?

1Ô∏è‚É£ **K√ºhlaggregate** - Hauptk√ºhlsysteme
2Ô∏è‚É£ **Verdampfer** - Luftk√ºhler f√ºr K√ºhlr√§ume
3Ô∏è‚É£ **Kondensatoren** - W√§rmeabf√ºhrungseinheiten
4Ô∏è‚É£ **Isolationspaneele** - Wand- und Deckenpaneele
5Ô∏è‚É£ **K√ºhlraumt√ºren** - Eingangst√ºren
6Ô∏è‚É£ **Komplettes System** - Alles was ben√∂tigt wird

Bitte w√§hlen Sie eine Nummer oder beschreiben Sie was Sie brauchen.`,

        2: `üå°Ô∏è **Anwendung & Temperatur** (Schritt ${session.step}/${session.maxSteps})

Was werden Sie im K√ºhlraum lagern?

‚Ä¢ **Fleisch/Fisch** (-18¬∞C Gefrieren)
‚Ä¢ **Molkereiprodukte** (+5¬∞C K√ºhlung)
‚Ä¢ **Gem√ºse/Obst** (0¬∞C frisch)
‚Ä¢ **Blumen** (+5¬∞C frisch)
‚Ä¢ **Andere** - Temperatur angeben

Beispiel: "Fleischlagerung" oder "-20¬∞C"`,

        3: `üìè **Kapazit√§t & Gr√∂√üe** (Schritt ${session.step}/${session.maxSteps})

${session.requirements.capacity ? 
  `Gro√üartig! Ich sehe Sie ben√∂tigen ${(session.requirements.capacity/1000).toFixed(1)}kW Kapazit√§t.` : 
  'Was ist Ihr K√ºhlbedarf?'}

Bitte geben Sie an:
‚Ä¢ **Raumgr√∂√üe**: "300m¬≥" oder "10x8x3 Meter"
‚Ä¢ **K√ºhlkapazit√§t**: "15kW" oder "15000W"

Beispiel: "200 Kubikmeter" oder "12kW K√ºhlung"`,

        4: `üí∞ **Budget** (Schritt ${session.step}/${session.maxSteps})

Wie hoch ist Ihr Budgetrahmen?

‚Ä¢ **Unter ‚Ç¨2.000** - Grundl√∂sungen
‚Ä¢ **‚Ç¨2.000 - ‚Ç¨5.000** - Professionelle Qualit√§t
‚Ä¢ **‚Ç¨5.000 - ‚Ç¨10.000** - Premium-Systeme
‚Ä¢ **√úber ‚Ç¨10.000** - Industrielle L√∂sungen
‚Ä¢ **Kein spezifisches Budget** - Alle Optionen zeigen

Beispiel: "5000 Euro Budget" oder "keine Budgetgrenze"`,

        5: `‚è∞ **Zeitplan** (Schritt ${session.step}/${session.maxSteps})

Wann ben√∂tigen Sie die Ausr√ºstung?

‚Ä¢ **Dringend** - Innerhalb 1 Woche
‚Ä¢ **Bald** - Innerhalb 1 Monat
‚Ä¢ **Normal** - Standardlieferung

Das hilft mir, vorr√§tige Artikel zu priorisieren.`
      }
    };

    const langQuestions = questions[session.language] || questions.en;
    return langQuestions[session.step] || langQuestions[1];
  }

  /**
   * Check if we have enough information to make recommendations
   */
  hasEnoughInfo(session) {
    const req = session.requirements;
    return req.equipmentType && (req.capacity || req.roomSize || req.temperature);
  }

  /**
   * Generate specific product recommendations
   */
  async generateRecommendations(session) {
    try {
      logger.info(`Generating recommendations for user ${session.userId}`);
      
      // Get specific products from database
      const recommendations = await this.getSpecificProducts(session.requirements);
      
      // Format response with actual products
      const response = this.formatProductRecommendations(recommendations, session);
      
      // Clean up session
      this.activeSessions.delete(session.userId);
      
      return response;
      
    } catch (error) {
      logger.error('Error generating recommendations:', error);
      return this.getErrorMessage(session.language);
    }
  }

  /**
   * Get specific products based on requirements
   */
  async getSpecificProducts(requirements) {
    const products = {
      cooling_units: [],
      evaporators: [],
      condensers: [],
      insulation: [],
      doors: [],
      accessories: []
    };

    try {
      if (requirements.equipmentType === 'complete_system') {
        // Get products for all categories
        products.cooling_units = await this.searchProducts('cooling unit compressor', requirements);
        products.evaporators = await this.searchProducts('evaporator air cooler', requirements);
        products.insulation = await this.searchProducts('insulation panel sandwich', requirements);
        products.doors = await this.searchProducts('cold room door', requirements);
      } else {
        // Get products for specific category
        const searchTerms = {
          cooling_units: 'cooling unit compressor refrigeration',
          evaporators: 'evaporator air cooler',
          condensers: 'condenser heat rejection',
          insulation: 'insulation panel sandwich',
          doors: 'cold room door',
          accessories: 'shelving thermometer lighting'
        };
        
        const term = searchTerms[requirements.equipmentType];
        if (term) {
          products[requirements.equipmentType] = await this.searchProducts(term, requirements);
        }
      }

    } catch (error) {
      logger.error('Error searching products:', error);
    }

    return products;
  }

  /**
   * Search products with specific filters
   */
  async searchProducts(searchTerm, requirements, limit = 3) {
    try {
      const filters = {
        search: searchTerm,
        per_page: limit * 2, // Get more to filter
        orderby: 'popularity',
        order: 'desc'
      };

      // Add budget filter
      if (requirements.budget) {
        filters.max_price = requirements.budget;
      }

      const products = await woocommerceService.searchProductsAdvanced(filters);
      
      // Apply additional filtering and scoring
      return products
        .filter(product => this.matchesRequirements(product, requirements))
        .slice(0, limit);
        
    } catch (error) {
      logger.error(`Error searching for ${searchTerm}:`, error);
      return [];
    }
  }

  /**
   * Check if product matches requirements
   */
  matchesRequirements(product, requirements) {
    // Always include products that are in stock
    if (product.stock_status !== 'instock') {
      return false;
    }

    // Budget check
    if (requirements.budget) {
      const price = parseFloat(product.price) || 0;
      if (price > requirements.budget) {
        return false;
      }
    }

    return true;
  }

  /**
   * Format product recommendations with specific details
   */
  formatProductRecommendations(products, session) {
    const { language, requirements } = session;
    
    const texts = {
      en: {
        title: "üéØ **Your Equipment Recommendations**",
        based_on: "Based on your requirements:",
        no_products: "No suitable products found in our current inventory.",
        contact: "Please contact our sales team for custom solutions:",
        phone: "üìû Phone: +49 XXX XXXX",
        email: "üìß Email: sales@durmusbaba.de",
        price: "Price",
        stock: "‚úÖ In Stock",
        view: "View Details"
      },
      tr: {
        title: "üéØ **Ekipman √ñnerileriniz**",
        based_on: "Gereksinimlerinize g√∂re:",
        no_products: "Mevcut envanterimizde uygun √ºr√ºn bulunamadƒ±.",
        contact: "√ñzel √ß√∂z√ºmler i√ßin satƒ±≈ü ekibimizle ileti≈üime ge√ßin:",
        phone: "üìû Telefon: +49 XXX XXXX",
        email: "üìß E-posta: sales@durmusbaba.de",
        price: "Fiyat",
        stock: "‚úÖ Stokta",
        view: "Detaylarƒ± G√∂r"
      },
      de: {
        title: "üéØ **Ihre Ger√§te-Empfehlungen**",
        based_on: "Basierend auf Ihren Anforderungen:",
        no_products: "Keine passenden Produkte in unserem aktuellen Lager gefunden.",
        contact: "Bitte kontaktieren Sie unser Verkaufsteam f√ºr ma√ügeschneiderte L√∂sungen:",
        phone: "üìû Telefon: +49 XXX XXXX",
        email: "üìß E-Mail: sales@durmusbaba.de",
        price: "Preis",
        stock: "‚úÖ Verf√ºgbar",
        view: "Details ansehen"
      }
    };

    const t = texts[language] || texts.en;
    let response = `${t.title}\n\n`;

    // Add requirements summary
    response += `üìã ${t.based_on}\n`;
    if (requirements.capacity) {
      response += `‚Ä¢ Capacity: ${(requirements.capacity/1000).toFixed(1)}kW\n`;
    }
    if (requirements.temperature) {
      response += `‚Ä¢ Temperature: ${requirements.temperature}¬∞C\n`;
    }
    if (requirements.application) {
      response += `‚Ä¢ Application: ${requirements.application}\n`;
    }
    if (requirements.budget) {
      response += `‚Ä¢ Budget: ‚Ç¨${requirements.budget.toLocaleString()}\n`;
    }
    response += '\n';

    // Add specific product recommendations
    let hasProducts = false;
    const categoryNames = {
      en: {
        cooling_units: "üîß Cooling Units",
        evaporators: "‚ùÑÔ∏è Evaporators",
        condensers: "üå°Ô∏è Condensers",
        insulation: "üèóÔ∏è Insulation Panels",
        doors: "üö™ Cold Room Doors",
        accessories: "‚öôÔ∏è Accessories"
      }
    };

    for (const [category, productList] of Object.entries(products)) {
      if (productList.length > 0) {
        hasProducts = true;
        const categoryName = categoryNames[language]?.[category] || categoryNames.en[category];
        response += `${categoryName}\n`;
        
        productList.forEach((product, index) => {
          const price = product.price ? `‚Ç¨${parseFloat(product.price).toLocaleString()}` : t.contact;
          response += `\n${index + 1}. **${product.name}**\n`;
          response += `   ${t.price}: ${price}\n`;
          response += `   ${t.stock}\n`;
          if (product.short_description) {
            const desc = product.short_description.replace(/<[^>]*>/g, '').substring(0, 80);
            response += `   ${desc}...\n`;
          }
          response += `   ${t.view}: ${product.permalink}\n`;
        });
        response += '\n';
      }
    }

    if (!hasProducts) {
      response += `‚ùå ${t.no_products}\n\n`;
      response += `${t.contact}\n`;
      response += `${t.phone}\n`;
      response += `${t.email}`;
    }

    return response;
  }

  /**
   * Ask for clarification when answer isn't understood
   */
  askForClarification(session) {
    const messages = {
      en: "I didn't quite understand that. Could you please be more specific?",
      tr: "Bunu tam olarak anlayamadƒ±m. L√ºtfen daha a√ßƒ±k olabilir misiniz?",
      de: "Das habe ich nicht ganz verstanden. K√∂nnten Sie bitte spezifischer sein?"
    };
    
    return (messages[session.language] || messages.en) + '\n\n' + this.getQuestion(session);
  }

  /**
   * Get error message
   */
  getErrorMessage(language) {
    const messages = {
      en: "‚ùå I encountered an error while searching for products. Please try again or contact our support team.",
      tr: "‚ùå √úr√ºn ararken bir hata olu≈ütu. L√ºtfen tekrar deneyin veya destek ekibimizle ileti≈üime ge√ßin.",
      de: "‚ùå Bei der Produktsuche ist ein Fehler aufgetreten. Bitte versuchen Sie es erneut oder kontaktieren Sie unser Support-Team."
    };
    
    return messages[language] || messages.en;
  }

  /**
   * Estimate capacity based on room size and temperature
   */
  estimateCapacity(roomSize, temperature) {
    // Simple estimation - should use coldRoomCalculator for accuracy
    const baseCapacity = roomSize * 50; // W/m¬≥ base
    const tempFactor = temperature < -10 ? 1.5 : temperature < 0 ? 1.2 : 1.0;
    return Math.round(baseCapacity * tempFactor);
  }

  /**
   * Check if user has active flow
   */
  hasActiveFlow(userId) {
    return this.activeSessions.has(userId);
  }

  /**
   * Cancel active flow
   */
  cancelFlow(userId) {
    this.activeSessions.delete(userId);
    logger.info(`Cancelled equipment recommendation flow for user ${userId}`);
  }
}

module.exports = new EquipmentRecommendationFlow();